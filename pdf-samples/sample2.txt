 I'm going to show you how to build an AI agent starting from scratch, a simple one using LAM flow. Now, here's the good thing. We're not going to have to write any code to have the agent working because LAM flow is going to allow us to build it using Visual Components. This LAM flow, by the way, it's probably the best tool that I've found so far to build AI applications. It's incredible and it's open source. I'm going to ask you, just go to the repo and start the repo. You're probably going to want to come back to this multiple times. Now, in today's video to make things simpler, I'm going to be using a hosted version of LAM flow, is hosted over data stats. You can use that version as well. You can sign up for a free account and use their version. Or you can run all of these locally on your computer. Now, I'm starting using a template agent that DataStats offer. That's great because it saves me a few minutes of combining all of these components. We're going to go through all of these components. We're going to add to this agent so you can see the capabilities here. Here is what I have. I have one big component here that's called agent. This is the core of the operation. Now, we're going to be connecting to this agent and input and output so we can actually send instructions to the agent and the outputs so we can see we can get back the agent responses. Then we're going to keep connecting tools to this agent. Those tools are the ones that are going to be used to solve different problems. Where are all of these components coming from? You get here on my left. You can see a huge list of categories and components under these categories. For example, if you want to use a vector store, here you get a huge list of vector stores that you can just drag and drop into your canvas here and make the necessary connections. If you want to use different tools, here you get a huge list of tools. You will search, search API, tably AI search. If you want to add memory to your agent, here you can add a redist memory, whatever memory you want to add. If you want to add logic components to create a branch in different workflows, you can also do that. That makes all visually. Let's start with the agent here. Let's see what are the parameters that we need to specify. First of all, we're going to be using OpenAI as the model provider. The agent that's going to be powering our agent is going to be the OpenAI API. Specifically, we're going to be using GPT for all mini. Obviously, we have support here for all of the OpenAI models. I'm going to be using the mini one here. I'm going to be adding the API key, my personal API key to this agent. I use my OpenAI API. That's awesome. Here I can specify the instructions for this agent. In this case, they are the default ones. You are a helpful assistant that can use tools to answer questions and perform tasks. Use more down to format your answer properly, embedding images and URLs. That's good enough. You can see here, there is a connection point for tools. There is a connection point for the input to this agent. Anything you want to send to the agent, you will connect to this input. You have a connection point for the response that this agent is going to provide. You can imagine, let's say you want to pre-process that response before showing it to the user, you can add different components to this response and then add the chat output at the end so you can display that answer. For now, just to make things simpler, I'm going to have a chat output here, which is basically displaying the output of the agent in the playground. When we try this out, when we run this agent, we want to get that output in the playground. That's what the chat output component is going to do for us. Then to gather the input, I have a chat input component here. It is very simple. This is where you can pass text and that text will be sent as an input to the agent here. See the connection? That's what's going to happen. That is a very, very simple agent. There are a couple of tools that I added to this agent. I connected those tools to this agent. The first one is a URL tool. This URL tool can fetch specific URLs. If we want to access one specific URL, these tools will be able to go to that URL and scrap the content of that URL and send it back to the agent. That's going to be helpful whenever we want to read the content of a URL out there. There is actually no parameters needed for these URLs. It's going to work out of the bots, which is great. There is a nodal tool here, which is just a calculator. This tool will be able to perform basic arithmetic operations on a given expression. Anything that we want to add or multiply or divide or anything like that is going to be done by this calculator. I connected both tools with this tool entry point here, connection point of the agent. That's it. Literally building this is going to take five minutes where you put all of the components that you want to get. Now you have a fully functioning agent. Now I'm going to try this out and then we're going to add some more components to make this agent a little bit. Let's call it smarter. So let's first try this out. Here you can just click on the playground button and this playground button is just going to open a session where you can just ask questions to the agent and see the response. So let's start with something simple. Let's do something like, ah, compute 56 plus 89 divided by 45. I don't know. Something very simple. So we want to test that this agent is capable of using the calculator tool in order to come up with the answer. So let's wait for it to run. So you can see here, it's going to tell us that the answer is 57.98. Let's check what happened, which is what I actually care about. Notice that was the input is the human set compute 56 plus 89 divided by 40 set by divided by 45. So the tool calculator. So we're using the calculator, which is great. This is the expression that we passed. And the answer back was 57.97. So this is awesome. The agent is using the calculator. Let's see if the agent is capable of using like the URL tool. So I'm going to say, ah, summarize the pay the Wikipedia page about deep learning. Okay. So let's see if the agent is capable of finding that URL, grabbing the content, summarizing the content and displaying it here. Now, there's something interesting here. I'm not specifying the URL. So I'm relying on the ability of chat GPT or the GPT 40 mini model to know what the URL is, pass it to the URL tool, retrieve the content and then summarize it. So we got here the summary. Let's see what happened behind the scenes. So here you can see the tool was the URL fetch content text. And the URL was HTTPS and Wikipedia org. Okay. So this knowledge obviously is coming from GPT 40's mini memory. So that's where the knowledge is. And the model asked the URL fetch tool to retrieve that specific URL. They got the content back and then it summarized it for us like 40 mini summarized the content for us. All right. So this is awesome. So this agent is capable of using the calculator is capable of just fetching content from a URL. Let's add, ah, let's add another new component here and see what happened. So there is a tool specific tool, which is the Wikipedia API tool. All right. So let's see if we can add this here. Let's see what we need here. All right. So there is an input for the tool. A language and how many we saws come back. Okay. So let's give this a try. I'm going to add it. I'm going to add it over here. That's fine. I'm going to grab the tool and I'm going to connect it with my agent as a tool. The stores getting messy here really quick. All right. So this is better. So now my agent is supposed to return multiple results from Wikipedia. Okay. So if I go to the playground now, I'm going to start a new session. And I'm going to say, ah, what is the best Wikipedia page to learn about activation functions. Let's see what happens when I asked this. So possibly the agent is going to go to the Wikipedia page and return all of those pages. All right. So. It's telling me the activation function page. So let's see what happens. Oh, look at this. So definitely. So it went to the Wikipedia tool with the query activation functions. And the output was the page activation function summary, the page multilayer person comes summary, the page softmax function summary. So it returned the summary of four different pages that was one of the parameters of the Wikipedia tool. And then we got back from, you know, obviously the model then made a decision and gave us back. Let me see if I can close this. And then gave us back the best summary of that specific page. This is pretty awesome. I'm going to do something else not wearing the line of adding stuff here. So I'm going to be using the search API. So I want my agent to be able to search the web. And maybe by adding this, we can get the agent to perform or use multiple tools at one. So let's, let's do this. I'm going to add the search API tool using Google. I'm going to need an API key. So I'm going to be using this is the search API website. So I do have an account here. So I do have an API key that I'm going to be adding here. Let's see if I can find it in my keyboard history. Here's my API key. Obviously, I'm going to have to now that I showed it in camera. I'm going to have to remove that API key. And now I'm going to connect this as a tool with my agent. So now my agent can also search the web using Google. So what can we do with this? Let's give this a try. I'm going to start a brand new session. And I'm going to do something a little bit more complex. I'm going to say what's the population of Madrid Spain plus the population of Florida, US divided by five. I mean, I know this is just just a test. But I want to see if the agent now is capable of combining multiple tools in order to come up with an answer. So ideally, the agent's going to search the web to find the value of the population of those two cities. Add them up and divided by five using a calculator. So we got an answer back. Let's see what happened here. So accessing the Wikipedia. So it did not search. It went to Wikipedia. That's OK. Population of Madrid, Spain, then population of Florida, US. So those were two requests that the agent performed with the Wikipedia tool. And then it went so accessing Wikipedia, accessing Wikipedia. And then it went with the calculator and found those two obviously and added them up and then divided by five. Let's see what the output was. This is the output. The population of Madrid, Spain is approximately blah, blah, blah. All right. So this is pretty awesome stuff. Now, obviously, it did not search the web. It just went with a different tool, which is totally OK. Sometimes it's going to search the web. Sometimes it's just going to go with a different tool. Let me just for the sake of it. Can you search? Can you search? And tell me who he is. All right. So I'm going to search for myself. Let's see if Google has any information about me, what the model says. And supposedly right now the agent is going to use the search API. So there we go. So the tool is still going to Wikipedia. And the output said not good Wikipedia search result was found, which is great. And then it went to the search API. And then it returned five results from the search API. Look at this. This is great. This is my LinkedIn account. This is my GitHub account. This is my personal website. This is an article that I wrote. This is just my media account. So it returned all of that from the search results. And here is just a summary of why. This is pretty awesome. And especially, it's so simple to get it done. Now, what do you do with this? When you're done with this, well, obviously, you can just get an API. And basically, you can host your agent and make calls to your agent through this API, assuming that you are going to publish this. It's super, super cool, super, super fast that you can build these sort of applications visually without having to write any code. One thing that I wanted to mention is, yes, you can access the code behind all of this. So if you have the inclination, the knowledge, to go and make modifications to the code, you can definitely do that. You can modify everything that you see here using Python. And the other thing that I wanted to mention is that, remember, all of this is open source. You can run it off of your computer. This is a great, great way to start building, to start learning how to build AI agents, and to start actually building applications that work. So hope you enjoy it. I'll see you in the next one. Bye.